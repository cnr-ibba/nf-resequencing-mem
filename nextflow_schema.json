{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/cnr-ibba/nf-resequencing-mem/master/nextflow_schema.json",
  "title": "cnr-ibba/nf-resequencing-mem pipeline parameters",
  "description": "Nextflow Resequencing with BWA MEM",
  "type": "object",
  "definitions": {
    "input_output_options": {
      "title": "Input/output options",
      "type": "object",
      "fa_icon": "fas fa-terminal",
      "description": "Define where the pipeline should find input data and save output data.",
      "properties": {
        "outdir": {
          "type": "string",
          "description": "Path to the output directory where the results will be saved.",
          "default": "./results",
          "fa_icon": "fas fa-folder-open"
        }
      }
    },
    "generic_options": {
      "title": "Generic options",
      "type": "object",
      "fa_icon": "fas fa-file-import",
      "description": "Less common options for the pipeline, typically set in a config file.",
      "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
      "properties": {
        "publish_dir_mode": {
          "type": "string",
          "default": "copy",
          "description": "Method used to save pipeline results to output directory.",
          "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
          "fa_icon": "fas fa-copy",
          "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
          "hidden": true
        },
        "enable_conda": {
          "type": "boolean",
          "description": "Run this workflow with Conda. You can also use '-profile conda' instead of providing this parameter.",
          "hidden": true,
          "fa_icon": "fas fa-bacon"
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/input_output_options"
    },
    {
      "$ref": "#/definitions/generic_options"
    }
  ],
  "properties": {
    "reads_path": {
      "type": "string",
      "default": "data/*_R{1,2}_*.fastq.gz"
    },
    "genome_path": {
      "type": "string",
      "default": "/path/to/genome.fasta"
    },
    "clip_r1": {
      "type": "string"
    },
    "clip_r2": {
      "type": "string"
    },
    "three_prime_clip_r1": {
      "type": "string"
    },
    "three_prime_clip_r2": {
      "type": "string"
    },
    "multiqc_config": {
      "type": "string"
    },
    "multiqc_title": {
      "type": "string"
    },
    "multiqc_logo": {
      "type": "string"
    },
    "max_multiqc_email_size": {
      "type": "string",
      "default": "25.MB"
    },
    "trim_nextseq": {
      "type": "string"
    },
    "save_trimmed": {
      "type": "boolean"
    },
    "save_bam": {
      "type": "boolean"
    },
    "skip_trimming": {
      "type": "boolean"
    },
    "tracedir": {
      "type": "string",
      "default": "./results/pipeline_info"
    },
    "email": {
      "type": "string"
    },
    "email_on_fail": {
      "type": "string"
    },
    "plaintext_email": {
      "type": "boolean"
    },
    "monochrome_logs": {
      "type": "boolean"
    },
    "help": {
      "type": "boolean"
    },
    "validate_params": {
      "type": "boolean",
      "default": true
    },
    "show_hidden_params": {
      "type": "boolean"
    },
    "singularity_pull_docker_container": {
      "type": "boolean"
    },
    "custom_config_version": {
      "type": "string",
      "default": "master"
    },
    "custom_config_base": {
      "type": "string",
      "default": "https://raw.githubusercontent.com/nf-core/configs/master"
    },
    "hostnames": {
      "type": "string",
      "default": "[binac:['.binac.uni-tuebingen.de'], cbe:['.cbe.vbc.ac.at'], cfc:['.hpc.uni-tuebingen.de'], crick:['.thecrick.org'], genotoul:['.genologin1.toulouse.inra.fr', '.genologin2.toulouse.inra.fr'], genouest:['.genouest.org'], icr_davros:['.davros.compute.estate'], imperial:['.hpc.ic.ac.uk'], imperial_mb:['.hpc.ic.ac.uk'], uppmax:['.uppmax.uu.se'], utd_ganymede:['ganymede.utdallas.edu'], utd_sysbio:['sysbio.utdallas.edu']]"
    },
    "config_profile_description": {
      "type": "string"
    },
    "config_profile_contact": {
      "type": "string"
    },
    "config_profile_url": {
      "type": "string"
    },
    "config_profile_name": {
      "type": "string"
    },
    "max_memory": {
      "type": "string",
      "default": "128.GB"
    },
    "max_cpus": {
      "type": "integer",
      "default": 16
    },
    "max_time": {
      "type": "string",
      "default": "240.h"
    }
  }
}
