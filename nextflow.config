/*
========================================================================================
    cnr-ibba/nf-resequencing-mem Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Input options
    input                      = null

    // References
    genome_fasta               = null
    genome_fasta_fai           = null
    genome_bwa_index           = null

    // MultiQC options
    multiqc_config             = null
    multiqc_logo               = "$baseDir/assets/cnr-ibba.png"
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Remove duplicates
    remove_fastq_duplicates    = false

    // SnpEff options
    snpeff_database            = null
    snpeff_cachedir            = null
    snpeff_config              = "$projectDir/assets/NO_FILE"

    // Save additional results
    save_trimmed               = false
    save_cram                  = false
    save_fasta_index           = false
    save_bwa_index             = false
    save_freebayes             = false
    save_unique_fastq          = false

    // Boilerplate options
    outdir                     = './results'
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '64.GB'
    max_cpus                   = 32
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
    }
    docker {
        conda.enabled          = false
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
    }
    singularity {
        conda.enabled          = false
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
    }
    pbs {
      // within this configuration, I will apply this to every process
      process.executor = 'pbs'
      process.queue = 'core'
      process.queueSize = 100
      process.pollInterval = '30sec'
    }
    slurm {
      // within this configuration, I will apply this to every process
      process.executor = 'slurm'
    }
    awsbatch  { includeConfig 'conf/awsbatch.config'  }
    test      { includeConfig 'conf/test.config'      }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'cnr-ibba/nf-resequencing-mem'
    author          = 'Paolo Cozzi, Barbara Lazzari'
    homePage        = 'https://github.com/cnr-ibba/nf-resequencing-mem'
    description     = 'Nextflow Resequencing with BWA MEM'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.6.1'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
